<types namespace="_goa">
  <type name="AllowedMethodsOptions">
    <prop boolean name="throw">
      Throw error instead of setting status and header.
    </prop>
    <prop type="!Function" name="notImplemented">
      Throw the returned value in place of the default `NotImplemented` error.
    </prop>
    <prop type="!Function" name="methodNotAllowed">
      Throw the returned value in place of the default `MethodNotAllowed` error.
    </prop>
  </type>

  <interface name="Router">
    <arg type="!_goa.RouterConfig" name="opts" opts>
      The options for the router.
    </arg>
    <fn name="allowedMethods">
      <arg type="!_goa.AllowedMethodsOptions" name="options">The options.</arg>
      Returns separate middleware for responding to `OPTIONS` requests with
      an `Allow` header containing the allowed methods, as well as responding
      with `405 Method Not Allowed` and `501 Not Implemented` as appropriate.

      ```javascript
      import Goa from '庸많oa/koa'
      import Router from '庸많oa/router'

      const app = new Goa()
      const router = new Router()

      app.use(router.routes());
      app.use(router.allowedMethods());
      ```

      **Example with [Boom](https://github.com/hapijs/boom)**

      ```javascript
      import Goa from '庸많oa/koa'
      import Router from '庸많oa/router'
      import Boom from 'boom'

      const app = new Goa()
      const router = new Router()

      app.use(router.routes())
      app.use(router.allowedMethods({
        throw: true,
        notImplemented: () => new Boom.notImplemented(),
        methodNotAllowed: () => new Boom.methodNotAllowed()
      }))
      ```
    </fn>
  </interface>

  <type record name="LayerConfig" desc="Options for the layer.">
    <prop string name="name">
      Route name.
    </prop>
    <prop boolean name="sensitive" default="false">
      Whether it is case-sensitive.
    </prop>
    <prop boolean name="strict" default="false">
      Require the trailing slash.
    </prop>
  </type>

  <type record name="RouterConfig" desc="Config for the router.">
    <prop type="!Array<string>" name="methods">
      The methods to serve.
      Default `HEAD`, `OPTIONS`, `GET`, `PUT`, `PATCH`, `POST`, `DELETE`.
    </prop>
    <prop string name="prefix" opt>
      Prefix router paths.
    </prop>
  </type>
</types>