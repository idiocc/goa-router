<types namespace="_goa">
  <import name="Middleware" from="@typedefs/goa" ns="_goa" link="https://github.com/idiocc/goa/wiki/Application#middlewarectx-_goacontextnext-function-promisevoid" />
  <type name="AllowedMethodsOptions">
    <prop boolean name="throw">
      Throw error instead of setting status and header.
    </prop>
    <prop type="!Function" name="notImplemented">
      Throw the returned value in place of the default `NotImplemented` error.
    </prop>
    <prop type="!Function" name="methodNotAllowed">
      Throw the returned value in place of the default `MethodNotAllowed` error.
    </prop>
  </type>

  <interface name="Router" desc="Create a new router."
    example="example/jsdoc/constructor.js"
    example-override="../../src => @goa/router">
    <arg type="!_goa.RouterConfig" name="opts" opt>
      The options for the router.
    </arg>
    <fn name="allowedMethods" return="!_goa.Middleware" example="example/jsdoc/allowed-methods.js, example/jsdoc/allowed-methods-boom.js" example-override="../../src => @goa/router" return="!_goa.Middleware">
      <arg type="!_goa.AllowedMethodsOptions" name="options">The options.</arg>
      Returns separate middleware for responding to `OPTIONS` requests with
      an `Allow` header containing the allowed methods, as well as responding
      with `405 Method Not Allowed` and `501 Not Implemented` as appropriate.
    </fn>
    <fn name="param" example="example/jsdoc/param.js">
      <arg string name="param">
        The name of the param.
      </arg>
      <arg type="!_goa.Middleware" name="middleware">
        The middleware.
      </arg>
      Run middleware for named route parameters. Useful for auto-loading or validation.
    </fn>
    <fn static name="url" return="string">
      <arg string name="path">
        The URL pattern.
      </arg>
      <arg type="!Array<!Object>" name="args">
        The URL parameters.
      </arg>
      Generate URL from url pattern and given `params`.

      ```javascript
      const url = Router.url('/users/:id', {id: 1});
      // => "/users/1"
      ```
    </fn>
    <fn name="use">
      <arg type="string|!Array<string>|!_goa.Middleware" name="path">
        The path or an array of paths. Pass middleware without path to apply to `*`.
      </arg>
      <arg type="!_goa.Middleware" name="...middleware">
        The middleware to use.
      </arg>
      Use given middleware.

      Middleware run in the order they are defined by `.use()`. They are invoked
      sequentially, requests start at the first middleware and work their way
      "down" the middleware stack.

      ```javascript
      // session middleware will run before authorize
      router
        .use(session())
        .use(authorize())

      // use middleware only with given path
      router.use('/users', userAuth())

      // or with an array of paths
      router.use(['/users', '/admin'], userAuth())

      app.use(router.routes())
      ```
    </fn>
  </interface>

  <type record name="LayerConfig" desc="Options for the layer.">
    <prop type="string|null" name="name">
      Route name.
    </prop>
    <prop boolean name="sensitive" default="false">
      Whether it is case-sensitive.
    </prop>
    <prop boolean name="strict" default="false">
      Require the trailing slash.
    </prop>
    <prop boolean name="ignoreCaptures" default="false">
      Ignore captures.
    </prop>
  </type>

  <type record name="RouterConfig" desc="Config for the router.">
    <prop type="!Array<string>" name="methods" opt>
      The methods to serve.
      Default `HEAD`, `OPTIONS`, `GET`, `PUT`, `PATCH`, `POST`, `DELETE`.
    </prop>
    <prop string name="prefix" opt>
      Prefix router paths.
    </prop>
    <prop string name="routerPath" opt>
      Custom routing path.
    </prop>
  </type>
</types>